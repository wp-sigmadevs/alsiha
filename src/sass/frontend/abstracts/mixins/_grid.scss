// ===========================
//	Grid Mixins
// ===========================

@use "sass:math";

// Creates a flexbox row
@mixin make-row() {
	display: flex;
	flex-wrap: wrap;
	margin-top: calc(-1 * #{$gutter-width});
	margin-right: calc(-.5 * #{$gutter-width});
	margin-left: calc(-.5 * #{$gutter-width});
}


// Prepares columns
@mixin make-col-ready() {
	box-sizing: border-box;
	flex-shrink: 0;
	width: 100%;
	max-width: 100%;
	min-height: 1px;
	padding-right: calc(#{$gutter-width} * .5);
	padding-left: calc(#{$gutter-width} * .5);
	margin-top: #{$gutter-width};
}

// Creates grid columns
@mixin make-col($size: false, $columns: $grid-columns) {
	@if $size {
		width: percentage(math.div($size, $columns));

	} @else {
		flex: 1 1 0;
		max-width: 100%;
	}
}

// Sets width to auto for a column.
@mixin make-col-auto() {
	width: auto;
}

// Creates column offset
@mixin make-col-offset($size, $columns: $grid-columns) {
	$num: math.div($size, $columns);
	margin-left: if($num == 0, 0, percentage($num));
}

// Sets the number of columns per row within a grid row.
@mixin row-cols($count) {
	> * {
		flex: 0 0 auto;
		width: percentage(math.div(1, $count));
	}
}

// Sets the order of a flexbox item
@mixin make-orders($size) {
	order: $size;
}

// Generates grid columns
@mixin generate-columns($size: '') {
	@for $i from 1 through $grid-columns {
		@if $size == '' {
			.col-#{$i} {
				@include make-col($i);
			}
		} @else {
			.col-#{$size}-#{$i} {
				@include make-col($i);
			}
		}
	}
}

// Generates grid offsets
@mixin generate-offsets($size: '') {
	@for $i from 1 through ($grid-columns - 1) {
		@if $size == '' {
			.offset-#{$i} {
				@include make-col-offset($i + 1);
			}
		} @else {
			.offset-#{$size}-#{$i} {
				@include make-col-offset($i + 1);
			}
		}
	}
}

// Generates grid columns
@mixin generate-orders($size: '') {
	@for $i from 1 through $grid-columns {
		@if $size == '' {
			.order-#{$i} {
				@include make-orders($i);
			}
		} @else {
			.order-#{$size}-#{$i} {
				@include make-orders($i);
			}
		}
	}
}
